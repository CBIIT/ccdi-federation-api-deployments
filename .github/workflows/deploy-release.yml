name: Federation Deploy Release
permissions: 
  contents: write
  id-token: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which Tier to Deploy'
        type: choice
        default: dev
        options:
            - dev
            - qa
      release_number:
run-name: ${{ github.event_name == 'workflow_dispatch' && format('CDK_Release_Deploy-{0}.{1}', inputs.environment, inputs.release_number) || '' }}
jobs:
  federation-diff:
    name: Show federation Release Changeset
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Check out code
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5     # v2.7.0

    - name: Set up Python 3.9
      uses: actions/setup-python@b64ffcaf5b410884ad320a9cfac8866006a109aa     # v4.8.0
      with:
        python-version: "3.9"

    - name: Set up Node
      id: node-setup
      uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7     # v3.8.2
      with:
        node-version: "20"
 
    # - name: Install CDK
    #   id: install-cdk
    #   run: |
    #     npm install -g aws-cdk@2.155.0

    - name: Install Python dependencies and CDK
      run: |
        python -m pip install --upgrade pip
        # install stack Python dependencies
        cd aws_cdk/memgraph && pip3 install --ignore-installed --break-system-packages -r requirements.txt
        npm install -g aws-cdk@2.155.0

    - name: AWS OIDC Authentication
      id: aws-auth
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502     # v4.0.2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: ${{ github.actor }}

    - name: Get Artifacts From S3
      id: get-artifacts-diff
      env:
        MEMGRAPH_IMAGE:
      shell: bash
      run: |
        vars=$(python3 scripts/readYML.py versions.yaml)
        for v in $vars; do command="export $v"; eval $command;  done

        MEMGRAPH_IMAGE=$IMAGE_MEMGRAPH

        echo "MEMGRAPH_IMAGE=$MEMGRAPH_IMAGE"

        echo "MEMGRAPH_IMAGE=$MEMGRAPH_IMAGE" >> $GITHUB_ENV

        ver_string=${{ inputs.release_number }}
        app_version="${ver_string%.*}"

        aws s3api get-object --bucket federation-cdk-config --key $MEMGRAPH_IMAGE/${{ inputs.release_number }}.zip ./${{ inputs.release_number }}.zip
        unzip ./${{ inputs.release_number }}.zip
        echo "Retrieved CDK App: ${{ inputs.release_number }}"

    - name: Diff Stack Resources
      id: diff-cdk-stack
      env:
        AWS_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      run: |
        cdk diff --app ${{ inputs.release_number }}

  federation-deploy:
    name: Federation CDK Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: federation-diff
    if: success() # Only proceed if diff job succeeds

    steps:
    - name: Check out code
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5     # v2.7.0

    - name: Set up Python 3.9
      uses: actions/setup-python@b64ffcaf5b410884ad320a9cfac8866006a109aa     # v4.8.0
      with:
        python-version: "3.9"

    - name: Set up Node
      id: node-setup
      uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7     # v3.8.2
      with:
        node-version: "20"

    - name: Install Python dependencies and CDK
      run: |
        python -m pip install --upgrade pip
        # install stack Python dependencies
        cd aws_cdk/memgraph && pip3 install --ignore-installed --break-system-packages -r requirements.txt
        npm install -g aws-cdk@2.155.0

    - name: AWS OIDC Authentication
      id: aws-auth
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502     # v4.0.2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: ${{ github.actor }}

    - name: Get Artifacts From S3
      id: get-artifacts
      env:
        MEMGRAPH_IMAGE:
      shell: bash
      run: |
        vars=$(python3 scripts/readYML.py versions.yaml)
        for v in $vars; do command="export $v"; eval $command;  done

        MEMGRAPH_IMAGE=$IMAGE_MEMGRAPH

        echo "MEMGRAPH_IMAGE=$MEMGRAPH_IMAGE"

        echo "MEMGRAPH_IMAGE=$MEMGRAPH_IMAGE" >> $GITHUB_ENV

        ver_string=${{ inputs.release_number }}
        app_version="${ver_string%.*}"

        aws s3api get-object --bucket federation-cdk-config --key $MEMGRAPH_IMAGE/${{ inputs.release_number }}.zip ./${{ inputs.release_number }}.zip
        unzip ./${{ inputs.release_number }}.zip
        echo "Retrieved CDK App: ${{ inputs.release_number }}"

    - name: Deploy Stack Resources
      id: deploy
      env:
        AWS_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      run: |
        cdk deploy --app ${{ inputs.release_number }} --require-approval=never --force

    - name: AWS Authenticate to the central ECR acct
      if: ${{ github.event.inputs.environment == 'prod' }}
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502     # v4.0.2
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: ${{ github.actor }}
    
    - name: Login to Amazon ECR
      if: ${{ github.event.inputs.environment == 'prod' }}
      uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7
    
    - name: tag and push image to ECR
      id: push-prod-images
      if: ${{ github.event.inputs.environment == 'prod' }}
      shell: bash
      run: |
        PREFIX="${1:-prod}"  
        # Extract ECR image URIs from CloudFormation template
        TEMPLATE="${2:-${{ inputs.environment }}.${{ inputs.release_number }}/ccdi-federation-prod.template.json}"

        [[ ! -f "$TEMPLATE" ]] && { echo "File not found: $TEMPLATE"; exit 1; }

        echo "ECR Images:"
        jq -r '.Resources[].Properties.ContainerDefinitions[]?.Image["Fn::Join"][1] | map(if type == "object" then "amazonaws.com" else . end) | join("")' "$TEMPLATE" 2>/dev/null | grep -v "^$"

        echo ""
        echo "Command to retag images:"
        echo "======================="
        jq -r '.Resources[].Properties.ContainerDefinitions[]?.Image["Fn::Join"][1] | map(if type == "object" then "amazonaws.com" else . end) | join("")' "$TEMPLATE" 2>/dev/null | grep -v "^$" | while read -r image; do
            new_image=$(echo "$image" | sed "s|:\([^:]*\)$|:$PREFIX-\1|g")
            echo "docker pull $image"
            echo "docker tag $image $new_image"
            echo "docker push $new_image"
        done

    - name: Slack Notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08     # v1.6.0
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        message: "Deployed: Federation ${{ inputs.release_number }} to the ${{ inputs.environment }} tier"
      if: always()