@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'federation-deploy-agent'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,sandbox,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            // githubToken: "sowmya-jenkins-token",
            name: 'CodeBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/ccdi-federation-api-aggregation')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = "ccdi-federation"
	  SERVICE      = "api"
	  ECR_REPO     = "ccdi-federation-api"
	  DEPLOY_JOB   = "DeployBackend"
	  SLACK_SECRET = "federation_slack_url"
	  CODE_REPO    = "ccdi-federation-api-aggregation"
	  JOB_PATH     = "_default/_lower/FEDERATION/_jobs"
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "ccdi-federation-api-deployments"
	  ENV          = "${params.Environment}"
      CODE_BRANCH  = "${params.CodeBranch}"
      CODE_FOLDER  = "${env.PROJECT}-${env.SERVICE}"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
            // githubToken: "sowmya-jenkins-token",
			branches: [[name: "${env.CODE_BRANCH}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.CODE_FOLDER}"]],
			submoduleCfg: [],
			userRemoteConfigs:
            //[[credentialsId: 'sowmya-jenkins-token', url: 'https://github.com/CBIIT/CCDI-Portal-WebService']]])
            [[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

        sh "cd $WORKSPACE/$CODE_FOLDER && git submodule update --init --recursive"

  		checkout([$class: 'GitSCM',
            // githubToken: "sowmya-jenkins-token",
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[credentialsId: 'sowmya-jenkins-token', url: 'https://github.com/CBIIT/ccdi-federation-api-deployments']]])

        }

  	}

  	stage('Build'){

 		steps {

 			script {

			    account_number = sh(label: 'Get ECR Account Number', returnStdout: true, script: "aws secretsmanager get-secret-value --region us-east-1 --secret-id ccd-dev-federation-secrets --query SecretString --output text | jq -r '.central_ecr_account_id'")
				env.ECR_ACCT = account_number.trim()
				echo "$ECR_ACCT###"

			}

			script {

			    sh label: 'Docker-Build', script: '''#!/bin/bash

				# build HUB Docker container
				echo "Building: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
				#aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				#repo_url="$aws_account.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"
				repo_url="$ECR_ACCT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"

				cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $repo_url:$CODE_BRANCH.$BUILD_NUMBER .

				'''

			}

 		}

  	}

  	// stage('Test'){

    //     agent {
    //         docker {
    //             image 'cbiitssrepo/cicd-ansible_4.0'
    //             args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
    //             reuseNode true
    //         }
    //     }

 	// 	steps {

 	// 		script {

	// 		    sh label: 'Trivy-Test', script: '''#!/bin/bash

	// 			hostname
	// 			whoami
	// 			groups
				
	// 			# Test image for vulnerabilities
    //             ##echo "Testing Image with Trivy: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
    //             ##aws_account=$(aws sts get-caller-identity --query "Account" --output text)
	// 			##repo_url="$aws_account.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"

    //             #trivy image --exit-code 1 --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER
    //             ##trivy image --timeout 15m --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER

	// 			'''

	// 		}

 	// 	}

  	// }

 	stage('push to ECR'){

		steps {

			script {

			    sh label: 'Docker-Push', script: '''#!/bin/bash

				# push HUB Docker container to ECR
				echo "Pushing: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
				#aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				#repo_url="$aws_account.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"
				repo_url="$ECR_ACCT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"

				# login and push to ECR
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url
				docker push $repo_url:$CODE_BRANCH.$BUILD_NUMBER

                # tag as latest and push to ECR
				#docker tag $repo_url:$CODE_BRANCH.$BUILD_NUMBER $repo_url:latest
                #docker push $repo_url:latest

				'''

			}

		}

 	}

 	stage('Update Deployment Manifest'){

		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        image:  "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        service: "${env.SERVICE}",
                        deploymentFile: "${env.PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${env.DEPLOY_REPO}",
                        deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${env.PROJECT}-${env.CODE_BRANCH}",
                    // githubToken: "sowmya-jenkins-token",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE}"
                )

            }

 		}

  	}

  }

  post {

    success {

		script {
			if (params.RunDeployStage) {
				echo 'Run the deployment for this sevice'
				build job: "$JOB_PATH/$DEPLOY_JOB", parameters: [string(name: 'ImageTag', value: "$CODE_BRANCH.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}